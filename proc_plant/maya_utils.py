import os
import pymel.core as pm
import maya.cmds as mc
from proc_plant.general_utils import get_project_root_dir
from proc_plant.consts import MTL_NS, TMP_NS, SUBDIV_CATCLARK


def try_deleting(name):
    """
    delete all pre-existing nodes with <name>
    :param name: name of obj to delete, or list of names. can also include maya wildcards like "*"
    :return: True iff al delete operations were successful
    """
    if isinstance(name, list):
        all_succ = True
        for sub_name in name:
            print("iter %s" % sub_name)
            all_succ = all_succ and try_deleting(sub_name)
        return all_succ

    try:
        print("Trying to delete %s" % name)
        pm.select(name, visible=True, add=False)
        pm.delete()
        return True
    except:
        print("Cant delete %s" % name)
        return False


def assign_mtl_from_resources(obj_names, mtl_name, include_displacement=True, displacement_kw={}):
    if "." in mtl_name:
        mtl_name = mtl_name.split(".")[-2]

    mtl_full_name = "%s:%s" % (MTL_NS, mtl_name)

    if not pm.objExists(mtl_name) and not pm.objExists(mtl_full_name):
        base_dir = get_project_root_dir()
        mtl_path = os.path.join(base_dir, "resources", "%s.ma" % mtl_name)
        print('loading mtl from %s' % mtl_path)
        pm.importFile(mtl_path, namespace=TMP_NS)
        if not pm.system.namespace(exists=MTL_NS):
            pm.system.namespace(addNamespace=MTL_NS)
        mc.namespace(force=True, mv=(':'+TMP_NS, ':'+MTL_NS))
        pm.namespace(removeNamespace=TMP_NS, mergeNamespaceWithRoot=True)

    mtl = pm.PyNode(mtl_full_name)

    print("Assigning shader...")
    for selection_string in obj_names:
        for obj in pm.ls(selection_string, type='transform'):
            name = obj.name()
            plant_sg_name = mtl.shadingGroups()[0].name()
            mc.sets(name, e=True, forceElement=plant_sg_name)
            if include_displacement:
                set_arnold_displacement_attrs(name, **displacement_kw)


def set_arnold_displacement_attrs(obj_name, subdiv_type=SUBDIV_CATCLARK, ai_subdiv_iterations=3, should_auto_bump=True):
    """
    Enable displacement attributes for <object_name>
    See https://docs.arnoldrenderer.com/display/A5AFMUG/Subdivision+Settings
    :param obj_name: obect name. function will find obj's associated shape and change some params there.
    :param subdiv_type: type of subdivision algorithm
    :param ai_subdiv_iterations: number of subdivisions
    :param should_auto_bump: should a bump map be auto generated by the displacement map
    """
    obj_shape = pm.listRelatives(obj_name, type='shape')[0]
    obj_shape.aiSubdivIterations.set(ai_subdiv_iterations)
    obj_shape.aiSubdivType.set(subdiv_type)
    obj_shape.aiDispAutobump.set(should_auto_bump)
